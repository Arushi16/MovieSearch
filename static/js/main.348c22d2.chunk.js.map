{"version":3,"sources":["api/api.js","components/Movie.js","components/Home.js","components/Navbar.js","components/MovieDetail.js","components/renderValues.js","components/Error.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["require","config","base","fetchMovies","searchString","page","a","query","split","join","link","process","fetch","response","json","results","mainResults","Search","totalResults","Math","ceil","errorMsg","Error","Response","console","error","fetchMovieDetails","Movie","props","poster","Poster","className","to","imdbID","src","alt","Title","Year","Home","state","movieInput","moviesArr","pageNum","scrolling","loadingMsg","handleScroll","e","lastLi","document","querySelector","lastLiOffset","offsetTop","clientHeight","window","pageYOffset","innerHeight","loadMore","log","handleChange","setState","target","value","handleClick","preventDefault","fetchMovieList","prevState","this","scrollListener","addEventListener","onSubmit","type","onChange","placeholder","style","error_msg","undefined","map","mov","i","key","textAlign","margin","onClick","scroll","Component","color","Navbar","MovieDetail","movie","loading","fetchMovie","match","params","id","imageStyle","Type","Plot","Actors","Released","Country","Ratings","length","rating","Source","Value","width","includes","height","backgroundColor","imdbRating","Genre","g","Footer","role","aria-labelledby","rel","href","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.348c22d2.chunk.js","sourcesContent":["require('dotenv').config()\r\n\r\nconst base = \"https://www.omdbapi.com/?apikey=\";\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY\r\n\r\nexport const fetchMovies = async (searchString,page) => {\r\n    try {\r\n        const query = searchString.split(' ').join('%20')\r\n        const link = `${base}${apiKey}&s=${query}&page=${page}`\r\n        const response = await fetch(link)\r\n        const results = await response.json()\r\n        return {\r\n            mainResults: results.Search,\r\n            totalResults: Math.ceil((results.totalResults)/10),\r\n            errorMsg: results.Error,\r\n            Response: results.Response,\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error()\r\n    }\r\n}\r\n\r\nexport const fetchMovieDetails = async (query) => {\r\n    try {\r\n        const link = `${base}${apiKey}&i=${query}&plot=full`\r\n        const response = await fetch(link)\r\n        const results = await response.json()\r\n        return results\r\n    }\r\n    catch (error) {\r\n        console.error()\r\n    }\r\n}","import React from 'react';\r\nimport './Movie.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst DEFAULT_IMG = `https://cdn2.vectorstock.com/i/1000x1000/57/86/cinema-and-movie-night-background-two-vector-19355786.jpg`\r\n\r\nconst Movie = (props) => {\r\n    const poster = (props.Poster === 'N/A' ? DEFAULT_IMG : props.Poster)\r\n    return (\r\n        <>\r\n            <div className='movie-card'>\r\n                <Link to={`/MovieSearch/${props.imdbID}`} className='link_details'>\r\n                    <div className='image-card'>\r\n                        <img src={poster} alt={props.Title} />\r\n                    </div>\r\n                    <div className='detail-card'>\r\n                        <h5>{props.Title}</h5>\r\n                        <span className='year'> ({props.Year})</span>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\r\nimport './Home.css'\r\nimport { fetchMovies } from '../api/api'\r\nimport Movie from './Movie'\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        movieInput: '',\r\n        moviesArr: [],\r\n        totalResults: '',\r\n        pageNum: 1,\r\n        scrolling: false,\r\n        error: '',\r\n        loadingMsg: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollListener = window.addEventListener('scroll', (e) => {\r\n            this.handleScroll(e)\r\n        })\r\n    }\r\n\r\n    handleScroll = (e) => {\r\n        const { scrolling, totalResults, pageNum } = this.state\r\n        if (scrolling) return\r\n        if (totalResults <= pageNum) return\r\n        try {\r\n            const lastLi = document.querySelector('ul.movies > li:last-child')\r\n            const lastLiOffset = lastLi.offsetTop + lastLi.clientHeight\r\n            const pageOffset = window.pageYOffset + window.innerHeight\r\n            if (pageOffset > lastLiOffset)\r\n                this.loadMore()\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            movieInput: e.target.value,\r\n            moviesArr: []\r\n        })\r\n    }\r\n\r\n    handleClick = e => {\r\n        e.preventDefault()\r\n        this.setState({\r\n            loadingMsg: 'Searching..'\r\n        })\r\n        this.fetchMovieList()\r\n    }\r\n\r\n    fetchMovieList = async () => {\r\n        const { movieInput, pageNum } = this.state\r\n        const response = await fetchMovies(movieInput, pageNum)\r\n        if (response.Response === 'True') {\r\n            this.setState({\r\n                moviesArr: [...this.state.moviesArr, ...response.mainResults],\r\n                totalResults: response.totalResults,\r\n                scrolling: false,\r\n                error: response.errorMsg,\r\n                loadingMsg: '',\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                error: response.errorMsg,\r\n                loadingMsg: '',\r\n            })\r\n        }\r\n    }\r\n\r\n    loadMore = () => {\r\n        this.setState(prevState => ({\r\n            pageNum: prevState.pageNum + 1,\r\n            scrolling: true,\r\n            loadingMsg: 'Loading more..'\r\n        }), this.fetchMovieList)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className='heading'>\r\n                    <h1>Search for Movies !</h1>\r\n                    <form onSubmit={this.handleClick}>\r\n                        <input type='text' value={this.state.movieInput} onChange={this.handleChange}\r\n                            placeholder='Enter the movie name..'\r\n                        />\r\n                        <input className='search' type='submit' />\r\n                    </form>\r\n                    <span style={error_msg}>{this.state.error !== undefined ? this.state.error : ''}</span>\r\n                </div>\r\n                <div className='container'>\r\n                    {this.state.moviesArr && this.state.moviesArr.map((mov, i) => {\r\n                        return (\r\n                            <ul key={i} className='movies'>\r\n                                <li>\r\n                                    <Movie {...mov} />\r\n                                </li>\r\n                            </ul>\r\n                        )\r\n                    }\r\n                    )}\r\n                </div>\r\n                <h2 style={{textAlign: 'center',margin: '2rem'}}>{this.state.loadingMsg ? this.state.loadingMsg : ''}</h2>\r\n                <div className='scrollToTop' onClick={() => window.scroll(0, 0)}>\r\n                    <span className='arrowTop'>&uarr;</span>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst error_msg = {\r\n    color: 'rgb(219, 113, 13)',\r\n}\r\nexport default Home;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <nav className='nav'>\r\n            <ul className='navStyle'>\r\n                <Link to='/MovieSearch/' className='link'>\r\n                    <li>H.O.M.E.</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { fetchMovieDetails } from '../api/api'\r\nimport './MovieDetail.css'\r\nimport { renderColor, renderWidth } from './renderValues'\r\nconst DEFAULT_IMG = `https://cdn2.vectorstock.com/i/1000x1000/57/86/cinema-and-movie-night-background-two-vector-19355786.jpg`\r\n\r\nclass MovieDetail extends Component {\r\n    state = {\r\n        movie: [],\r\n        loading: true,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchMovie()\r\n    }\r\n\r\n    fetchMovie = async () => {\r\n        const response = await fetchMovieDetails(`${this.props.match.params.id}`)\r\n        this.setState({\r\n            movie: response,\r\n            loading: false,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { movie, loading } = this.state\r\n\r\n        const poster = movie.Poster === 'N/A' ? DEFAULT_IMG : movie.Poster\r\n        return (\r\n            <>\r\n                {loading ? <h2 className='loading'>Loading.. Please wait !\r\n                </h2> :\r\n                    <div className='movie-Board'>\r\n                        <div className='image-section'>\r\n                            <img src={poster} alt={movie.Title} className='image' style={imageStyle} />\r\n                        </div>\r\n                        <div className='details-section'>\r\n                            <p className='subhead title'>{movie.Title}</p>\r\n                            <p className='subhead subType'>({movie.Type})</p>\r\n                            <p className='subhead'>{movie.Plot !== 'N/A' ? movie.Plot : ''}</p>\r\n                            {movie.Actors !== 'N/A' ? <p><span className='head-text'>Cast:</span> <span className='subhead'>{movie.Actors}</span></p> : ''}\r\n                            <p><span className='head-text'>Released on:</span> <span className='subhead'>{movie.Released}</span></p>\r\n                            <p><span className='head-text'>Country: </span><span className='subhead'>{movie.Country}</span></p>\r\n                            {movie.Ratings.length ? <p className='head-text ratings'>Ratings</p> : ''}\r\n                            {movie.Ratings ? movie.Ratings.map(rating =>\r\n                                <div key={rating.Source} className='ratings'>\r\n                                    <p>{rating.Source}: {rating.Value}</p>\r\n                                    <div style=\r\n                                        {{\r\n                                            width: renderWidth(rating.Value),\r\n                                            height: '5px',\r\n                                            backgroundColor: renderColor(rating.Value),\r\n                                        }} className='progressBar' />\r\n                                </div>\r\n                            ) : <p>{movie.imdbRating}/10</p>}\r\n                            <div className=\"tags-container\">\r\n                                {movie.Genre &&\r\n                                    movie.Genre.split(', ').map(g => (\r\n                                        <span key={g}>{g}</span>\r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst imageStyle = {\r\n    height: '25rem',\r\n    width: '20rem'\r\n}\r\nexport default MovieDetail;","export const renderWidth = (value) => {\r\n    return value.includes('%') ? value :\r\n        (\r\n            value.split('/')[1] === '100' ? `${value.split('/')[0]}%` : `${value.split('/')[0] * 10}%`\r\n        )\r\n}\r\n\r\nexport const renderColor = (Value) => {\r\n    return (Value.split('/')[1] === '10' ?\r\n        (\r\n            Value >= '7' ? 'green'\r\n                :\r\n                (Value >= '4' ? 'orange' : 'red')\r\n        )\r\n        :\r\n        (\r\n            Value.includes('%') ?\r\n                (Value >= '70%' ? 'green'\r\n                    :\r\n                    (Value >= '40%' ? 'orange' : 'red'))\r\n                :\r\n                (\r\n                    Value.split('/')[1] === '100' ?\r\n                        (Value >= '70' ? 'green' : (Value >= '40' ? 'orange' : 'red')\r\n                        )\r\n                        :\r\n                        'white'\r\n                )\r\n        ))\r\n}","import React from 'react';\r\nimport '../App.css'\r\n\r\nexport const Error = () => {\r\n    return (\r\n        <div className='errorPage'>\r\n            <h4>\r\n                <span className='icon_arrow'>&uarr;</span>\r\n                Click here\r\n            </h4>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport '../App'\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div>\r\n            <footer>\r\n                <p>\r\n                    <span role='img'>&copy;</span>\r\n                    This website is made by Arushi !\r\n                    <span role='img' aria-labelledby='heart'>&#128151;</span>\r\n                    Movie icon by\r\n                    <a target=\"_blank\" rel=\"noopener\" href=\"https://icons8.com\"> Icons8. </a>\r\n                    <a target=\"_blank\" rel=\"noopener\" href=\"http://www.omdbapi.com/\">Movie API by OMDB API</a>\r\n                </p>\r\n            </footer>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport Home from './components/Home';\nimport Navbar from './components/Navbar'\nimport MovieDetail from './components/MovieDetail';\nimport { Error } from './components/Error'\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Footer } from './components/Footer';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/MovieSearch/' exact component={Home} />\n          <Route path='/MovieSearch/:id' exact component={MovieDetail} />\n          <Route path='/movie/:id' exact component={MovieDetail} />\n          <Route component={Error} />\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}